/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     void findinorder(TreeNode* root,vector<int>& inorder)
     {
         if(root==NULL)
         return ;
         findinorder(root->left,inorder);
         inorder.push_back(root->val);
         findinorder(root->right,inorder);
     }
     TreeNode* bstusinginorder(vector<int>& inorder,int s,int e)
     {
         if(s>e)
         return NULL;
         int mid=(s+e)/2;
         int element=inorder[mid];
         TreeNode* root=new TreeNode(element);
         root->left=bstusinginorder(inorder,s,mid-1);
         root->right=bstusinginorder(inorder,mid+1,e);
         return root;
     }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> inorder;
        findinorder(root,inorder);
        int s=0;
        int e=inorder.size()-1;
        root=bstusinginorder(inorder,s,e);
        return root;
    }
};
