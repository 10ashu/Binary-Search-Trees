/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int maxvalue(TreeNode* root)
 {
  TreeNode* temp=root;
  if(root==NULL)
  return -1;
  while(temp->right!=NULL)
  {
    temp=temp->right;
  }
   return temp->val;
 }
    TreeNode* deleteNode(TreeNode* root, int key) {
         if(root==NULL)
     return NULL;
     if(root->val==key)
     {
      // 4 cases
      // 1 case leaf node 
      if(root->left==NULL&&root->right==NULL)
      {
        return NULL;
      }
      // left null n ho
      else if(root->left!=NULL&&root->right==NULL)
      {
        TreeNode* child=root->left;
        delete root;
        return child;
      }
      else if(root->left==NULL&&root->right!=NULL)
      {
        TreeNode* child=root->right;
        delete root;
        return child;
      }   
      else{  // Dono taraf node of
      int inorderp=maxvalue(root->left);
      root->val=inorderp;
      root->left= deleteNode(root->left,inorderp);
      }
     }



     else if(root->val>key)
     {
      root->left=deleteNode(root->left,key);
     }
     else if(root->val<key)
     {
      root->right=deleteNode(root->right,key);
     }
     return root;
    }
};
